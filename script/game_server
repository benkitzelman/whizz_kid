#!/usr/bin/env ruby

require 'pathname'
require 'optparse'
require 'fileutils'

require './bootstrap'
require 'em-websocket'

class GameRunner
  attr_reader :app, :env, :host, :port, :workers

  def initialize options = {}
    @app     = options.fetch :name,    'whizz_kid'
    @env     = options.fetch :env,     'development'
    @port    = options.fetch :port,    (development?? 3000 : 9292)
    @host    = options.fetch :host,    '127.0.0.1'
  end

  def root
    if development?
      Pathname.new(__FILE__).dirname + '..'
    else
      Pathname.new("/home/ubuntu/#{app}/current")
    end
  end

  def development?
    env == 'development'
  end

  def pidfile
    File.join(root, 'tmp', 'pids', "#{app}-game.pid")
  end

  def logfile
    File.join(root, 'log', "#{app}-game.log")
  end

  def pid
    File.exists?(pidfile) ? File.read(pidfile).to_i : 0
  end

  def running?
    File.exists?(pidfile) && alive?(pid)
  end

  def alive? pid
    Process.kill(0, pid) rescue nil
  end

  def restart
    stop if running?
    start
  end

  def absolute_path *fragments
    File.absolute_path(File.join(root, *fragments))
  end

  def start
    raise "already running with #{pid}" if running?
    Process.daemon(File.dirname(__FILE__))
    setup!

    File.open(pidfile, "w") { |f| f << $$ }
    WhizzKid.start_game_server
  end

  def setup!
    FileUtils.mkpath(File.dirname(pidfile))
    FileUtils.mkpath(File.dirname(logfile))
  end

  def stop timeout = 10
    return unless running?

    Process.kill('TERM', pid)

    ticks = 0
    while ticks < timeout
      break unless running?
      sleep 1
      ticks += 1
    end

    if running?
      pids = %x{ps -eo ppid,pid}.split(/[\r\n]+/).map {|line| line.strip.split(/\s+/).map(&:to_i)}
      pids = pids.select {|ppid, cpid| ppid == pid}.map(&:last)
      Process.kill('KILL', *pids) rescue nil # nuke workers
      Process.kill('TERM',   pid) rescue nil # term master
      sleep 5
    end
    File.delete pidfile
  end
end # ThinRunner

options = {}
OptionParser.new do |opt|
  opt.on('-E environment', '--environment name', 'String')  {|name| options[:env]     = name}
  opt.on('-p port'       , '--port        port', 'Integer') {|port| options[:port]    = port}
end.parse!

runner  = GameRunner.new(options)
command = ARGV.shift || 'start'

case command
  when 'start'   then runner.start
  when 'stop'    then runner.stop
  when 'restart' then runner.restart
  else
    puts "Invalid command #{command}, expecting start, stop or restart"
end
